# # Задача "Банковские операции":
# # По итогу вы получите скрипт разблокирующий поток до баланса равному 500 и больше или блокирующий, когда происходит попытка снятия при недостаточном балансе.
# Особо важно соблюсти верную блокировку: в take замок закрывается, в deposit открывается.
import threading
import random
import time

# # Необходимо создать класс Bank со следующими свойствами
# Атрибуты объекта:
# balance - баланс банка (int)
# lock - объект класса Lock для блокировки потоков.
class Bank:
    def __init__(self):
        self.balance = 0
        self.lock = threading.Lock()

# Метод deposit:
# Будет совершать 100 транзакций пополнения средств.
# Пополнение - это увеличение баланса на случайное целое число от 50 до 500.
# Если баланс больше или равен 500 и замок lock заблокирован - lock.locked(), то разблокировать его методом release.
# После увеличения баланса должна выводится строка "Пополнение: <случайное число>. Баланс: <текущий баланс>".
# Также после всех операций поставьте ожидание в 0.001 секунды, тем самым имитируя скорость выполнения пополнения.
    def deposit(self):
        for operation in range(100):
            amount = random.randint(50, 500)                                                                       # Для генерации случайного целого числа используйте функцию randint из модуля random.
            with self.lock:
                self.balance += amount
                print(f"Пополнение на: {amount}. Баланс: {self.balance}")
                if self.balance >= 500:
                    self.lock.release()
            time.sleep(0.001)                                                                                           # Для ожидания используйте функцию sleep из модуля time.
# Метод take:
# Будет совершать 100 транзакций снятия.
# Снятие - это уменьшение баланса на случайное целое число от 50 до 500.
# В начале должно выводится сообщение "Запрос на <случайное число>".
# Далее производится проверка: если случайное число меньше или равно текущему балансу, то произвести снятие, уменьшив balance на соответствующее число и
# вывести на экран "Снятие: <случайное число>. Баланс: <текущий баланс>".
# Если случайное число оказалось больше баланса, то вывести строку "Запрос отклонён, недостаточно средств" и заблокировать поток методом acquire.
    def take(self):
        for operation in range(100):
            amount = random.randint(50, 500)                                                                       # Для генерации случайного целого числа используйте функцию randint из модуля random.
            print(f"Запрос на {amount}")
            with self.lock:
                if amount <= self.balance:
                    self.balance -= amount
                    print(f"Снятие: {amount}. Баланс: {self.balance}")
                else:
                    print("Запрос отклонён, недостаточно средств")
                    # self.lock.acquire()
            time.sleep(0.001)                                                                                           # Для ожидания используйте функцию sleep из модуля time.

bank = Bank()

thread1 = threading.Thread(target=bank.deposit)
thread2 = threading.Thread(target=bank.take)

thread1.start()
thread2.start()

thread1.join()
thread2.join()
print(f"Итоговый баланс: {bank.balance}")